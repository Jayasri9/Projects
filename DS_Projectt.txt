#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Seat {
    int seatNumber;
    int isBooked;
    char passengerName[50];
    struct Seat *next;
};

struct Seat *initializeSeats(int totalSeats) {
    struct Seat *head = NULL;
    for (int i = totalSeats; i > 0; i--) {
        struct Seat *newSeat = (struct Seat *)malloc(sizeof(struct Seat));
        if (newSeat == NULL) {
            printf("Memory allocation error\n");
            exit(EXIT_FAILURE);
        }
        newSeat->seatNumber = i;
        newSeat->isBooked = 0;
        strcpy(newSeat->passengerName, "");
        newSeat->next = head;
        head = newSeat;
    }
    return head;
}

void displayAvailableSeats(struct Seat *head) {
    printf("Available Seats:\n");
    while (head != NULL) {
        if (!head->isBooked) {
            printf("Seat %d\n", head->seatNumber);
        }
        head = head->next;
    }
}

void bookSeat(struct Seat *head, int seatNumber, const char *passengerName) {
    struct Seat *current = head;

    while (current != NULL && current->seatNumber != seatNumber) {
        current = current->next;
    }

    if (current != NULL && !current->isBooked) {
        current->isBooked = 1;
        strcpy(current->passengerName, passengerName);
        printf("Seat %d booked for %s\n", seatNumber, passengerName);
    } else {
        printf("Seat is already booked or does not exist\n");
    }
}

void cancelSeat(struct Seat **headPtr, int seatNumber) {
    struct Seat *current = *headPtr;
    struct Seat *prev = NULL;

    while (current != NULL && current->seatNumber != seatNumber) {
        prev = current;
        current = current->next;
    }

    if (current != NULL && current->isBooked) {
        current->isBooked = 0;
        strcpy(current->passengerName, "");
        printf("Booking for Seat %d cancelled\n", seatNumber);
    } else {
        printf("Seat is not booked or does not exist\n");
    }
}

void saveSeatsToFile(struct Seat *head, const char *filename) {
    FILE *file = fopen(filename, "w");
    if (file != NULL) {
        while (head != NULL) {
            fprintf(file, "%d %d %s\n", head->seatNumber, head->isBooked, head->passengerName);
            head = head->next;
        }
        fclose(file);
    } else {
        printf("Error opening file for writing\n");
    }
}

void freeSeats(struct Seat *head) {
    struct Seat *current = head;
    struct Seat *next;
    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }
}

int main() {
    int totalSeats;
    printf("Enter the total number of seats: ");
    scanf("%d", &totalSeats);

    struct Seat *head = initializeSeats(totalSeats);
    int choice;
    while (1) {
        printf("\n1. Display Available Seats\n");
        printf("2. Book Seat\n");
        printf("3. Cancel Seat\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                displayAvailableSeats(head);
                break;

            case 2: {
                int seatNumber;
                char passengerName[50];
                printf("Enter seat number: ");
                scanf("%d", &seatNumber);
                printf("Enter passenger name: ");
                scanf("%s", passengerName);
                bookSeat(head, seatNumber, passengerName);
                saveSeatsToFile(head, "seats1.txt");
                break;
            }

            case 3: {
                int seatNumber;
                printf("Enter seat number to cancel: ");
                scanf("%d", &seatNumber);
                cancelSeat(&head, seatNumber);
                saveSeatsToFile(head, "seats1.txt");
                break;
            }

            case 0:
                freeSeats(head);
                printf("Thank you for using\n");
                return 0;

            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    }

    return 0;
}